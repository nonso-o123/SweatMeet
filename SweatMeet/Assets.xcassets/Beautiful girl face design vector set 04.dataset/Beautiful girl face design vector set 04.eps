%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.1.0
%%For: (Nikola) ()
%%Title: (wink-beautiful-girl.eps)
%%CreationDate: 1/5/2014 7:36 PM
%%Canvassize: 16383
%%BoundingBox: 0 -2000 2000 1
%%HiResBoundingBox: 0 -1999.9502 2000 0.049805
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 1000.5 -1000.5 1000.5 -1000.5
%AI3_TileBox: 694 -1396 1306 -604
%AI3_DocumentPreview: Header
%AI5_ArtSize: 2000 2000
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 8
%AI8_OpenToView: -3509 1248 0.1667 1503 727 26 0 0 48 119 0 0
%AI5_OpenViewLayers: 77777777
%%PageOrigin:0 -1525
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 5939 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDAAFFA8FD7EFF7D27F8527D
%FD7AFF7DFD06F8A8FD78FF52FD07F852A8FD76FFF8275252FD06F852FD74
%FF7D27FD04FF7DF8F827F8F827A8FD72FFA8A8FD05FFA8FD06F852A8FD78
%FFA827FD05F8277DFD78FFA827FD07F8A8FD78FF52FD07F8FD79FF7DFD06
%F827FD79FFA827FD05F8A8FD7AFF52FD04F852FD7BFFA852F8F827FD7DFF
%A827F8A8FD74FFA8FFA8FD07FFA8FD71FFA852522752FD05277DA8FD29FF
%A8FD49FFA8277D7DFD05FFA8A8525252FD21FFA87D525227522727275227
%52527D7DFD04A8FD3CFF7DA87DFFA8A8527D52FD047DCAA8A8527DFD1DFF
%7DFD15F827527D7DFD37FFA827A87D52FD052752275227527DFF7D52A8FD
%1AFF7DFD1BF827527DA8FD2CFFA8A8FFA87DFFFF7DF8272727FD07F82727
%52277DA87D7DFD19FFFD21F8527DFD2BFFA8A8A87DA8A852FD05F827527D
%5252F8272752277DA87D7DFD17FFA8FD0CF852527D7DA8A8FFA8FFFFFFA8
%A87D7D525227FD05F8277DA8FD26FFFD047D525227FD05F852FD05FF7D26
%F8F8F82727527D7DA8FD16FFA8FD07F827277DA8FD13FFA87D5227FD04F8
%52FD25FFA87D7D5252FD05F827A8FD05FFA84B26272052272727527DA8A8
%FD16FF52F8F8F82752A8FD1CFF7D27F8F8F87DFD23FFA8A87D7D27F8F827
%F8F852FD06FF7DF84B2027A9FFF82027527DFD18FFA87DA8FD21FFA852F8
%F8277DFD24FFA8A87D7D5227F852FD06FF524B264BF85227F820272652FD
%3FFF7DF8F87DFD25FF7D7DA84BF8F852FD05FF76204B26FD04F827262720
%A8FD40FF52F827FD24FFA8FFA827F8F8F827A8FFFFFFA826264B2627F84B
%264B2076A8FD42FF527DFD24FF7D527D7D52F8F8F8277D7DA82720F82020
%20F8202027A8FD1FFFA8FD24FFA8A8FD22FFA8A8FFFFFF7D527D5252F827
%527D7DA8FD047D525252A8FD1CFFA8A8FD05527D7DA8FD46FFA8A8FFFFFF
%7D7DA8FD0BFF7DA8FD1AFFFD047D2727F827F827F827277D7DFD46FFA8A8
%FD29FFA8A87D5252F827F827F827FD05F8527DFD07FFA8FD63FFA8FD047D
%27522727FD0DF82752A8FFFFA87DFD62FFA8A8FD09FFA8A87DA827522727
%FD07F8277D7D7DFFFFFFA8FD6DFFA8A8FF527D7D5227FD06F827527D7DFD
%71FFA8A8FFFFFF52A87D52FD05F8FD047DA8FD6DFFA8FFFFFFA87DFD04FF
%A87DF8F8F82752A8A8FD72FFA8FD06FFA8FFA8527D7DFFA8FD78FF7DFFFF
%FFA8A8A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD7EFFA87DFD04527DA8A8FD0BFF
%A8FD6AFFFD04A8FD05F827277DA8FD05FFA8A87DFD70FF7DA8A8FFFFFFFD
%057DA87D7DA8FD7AFFFD04A8FDFCFFFDFCFFFDFCFFFDFCFFFD71FFA1CAA1
%C4A1CACAFFCAFD75FFCA949493A19A9A939A949A949A949B9A9B9A9B9A9B
%9A9A9AA1A1CAA8FD64FF949A94BC9BC39ABC949A94BC949A94BC94BDA1CA
%A1C4A1C39B9A94BC9AC3A1FD60FFA89A949A949A949A949A949A949A949A
%949A949A9AC39BA19BC39A9A949B9494939A9BC4A8FD5CFF949A949A949A
%949A949A949A949A9A9A949A949A949A949A949A94C3A1BD949A949A949A
%9AC4CAFD59FFA16F9A949A949A9394939493949394939493949394939493
%9A949A949A949A949A949A9494939494A1A1FD56FFCA946F946F9BCAFF9B
%9494C39B9A939A949A9494939A949A939A949A939A949A949A949A94BC94
%9A94BC9AC3A1FD54FF9A936F4476FFFFCA69C4FFFFA89A93949394949A93
%946F946F946F936F946F936F946F6F6F946F946F94939493BDA1CACBFD4F
%FFCA6F6F44A1FFFFFFC3FD04FFCA9A939AA8FFFFFF9A949494939A949493
%9A9494939494946F706F6F6F706F946F94949BA1CAFD4EFF9A454577FD09
%FFA193A8FD05FF94949394699393949394939493949394696F696F696F69
%6F696F696F699A9BCAA8FD4AFFA1BC6FA1FD0AFFA1FD06FFCA939494C3C3
%BD939A93BDCAFF9A949494696F6F946F6F69946F6F444B456F94BDCAFD49
%FFCB9494A1FD11FFCA949AFFFFFFCA9A69C3FD04FF93946FA1A89A696F6F
%9A6F6F4576764B459A93C3FD4AFFBD93C3FD12FFA1FD05FFA1C3FD05FF9A
%93CAFFFFA16976FFFF9B45CAFFFF6F9494C3FD4BFFA19494CAFD17FFCACA
%FD05FF93CAFFFFFFA1A1FFFFFF76A1FFFF9A949ACBFD4CFFCA94BC9476A1
%FD26FFA1CAC4939ACAFD4EFFA89A949A696FCAFD23FFA8A16F9493CAFD51
%FF9A9A949A699BFD04FFCBFD15FF77CBFFFFFFCA70A19B9A8D9AA1FD52FF
%A89A949493946994949BA2CAA2FD07FFA1FD05FFA1A8FD04FF76444BA8A1
%A16F936F94939BA8FD54FF9A9A9AC39B9B949493BDCAFFCAC4A2FFCAFF9B
%6F76A8CBFFA16F4BFFFFFF9B94709A9394939A949494CAFD56FF9B939BA8
%CAA2C49A9A9394949A9394939AFD056F706F946F9493BD9494949A949A94
%9493949BFD58FF9A9A94C3A8CBCACA949A949A949A949A949A94BC94BC94
%9A94BC9A9A949A949A949A949A93BDCAFD59FF9B939A939B9BC3949A939A
%949A939A949A939A949A939A939A939A949A939A949A939494C3FD5BFFA1
%9A949A949A949A94BC949A94BC949A94BC9A9A94BD9BC39ABC949A94BC94
%9A949A9BFD5DFFCA939A949A949A949A949A949A949A949AA1CAA1CAA1CA
%A19A949A949A949A939AA1FD5FFFCA939A949A949A949A949A949A949A94
%BDA1CAA1C39A9A949A949A949494C4FD62FFC39394949A939A949A939A94
%9A939A949A93949394939A9494939AA1FD66FF9B9A94BC949A94BC949A94
%BC949A94BC949A94BC949A9ACAFD69FFA8C39A9A9394939A9494939A9494
%9394949A9AC4A8FD6EFFCACAA1C39ABD9ABD9AC39BC3A1CACBFD76FFCAFF
%FFFFCAFDFCFFFDFCFFFDFCFFFDFCFFFD5AFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (Illustrator.exe)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(white-background) Ln
0 A
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 10 M []0 d1 XR
2000 0.049805 m
2000 -1999.9502 L
0 -1999.9502 L
0 0.049805 L
2000 0.049805 L
f
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(lips) Ln
0 A
0 O
0.146914 0.83386 0.490547 0.008606 0.815686 0.309804 0.396078 Xa
0 J 0 j 1 w 10 M []0 d1 XR
1355.25 -1600.0498 m
1071.0996 -1684.0498 L
1115.0664 -1710.5498 1118.4502 -1736.8672 1081.25 -1763 C
1079.3164 -1764.2666 1077.333 -1765.5332 1075.2998 -1766.7998 C
960.3335 -1839.8672 843.5332 -1868.583 724.8999 -1852.9502 C
606.1333 -1837.2168 547.6001 -1793.083 549.2998 -1720.5498 C
550.3335 -1671.1836 542.7666 -1622.6172 526.6001 -1574.8496 C
525.5664 -1571.8828 524.5 -1568.9502 523.3999 -1566.0498 C
545.8999 -1563.1836 563.4834 -1577.667 576.1499 -1609.5 C
1065.6504 -1566.0498 L
1141.5996 -1526.4502 L
883.5 -1481.3164 709.5166 -1468.833 619.6499 -1489 C
574.6836 -1499.2334 531.2334 -1499.2334 489.2998 -1489 C
486.2666 -1481.2002 484.2168 -1474 483.1499 -1467.4004 C
482.6499 -1464.2998 482.3999 -1461.3164 482.3999 -1458.4502 C
481.8999 -1423.75 515.1836 -1409.5166 582.25 -1415.75 C
674.8833 -1424.3496 753.9336 -1427.1504 819.3999 -1424.1504 C
884.8335 -1421.1836 1063.4502 -1468.1328 1355.25 -1565 C
1372.1836 -1574.0996 1373.2832 -1585.1836 1358.5498 -1598.25 C
1357.4502 -1598.8164 1356.3496 -1599.417 1355.25 -1600.0498 C
f
*u
0.154726 0.886839 0.562737 0.018952 0.8 0.258824 0.352941 Xa
523.3999 -1566.0498 m
520.3667 -1557.6504 517.0664 -1549.25 513.5 -1540.8496 C
508.6665 -1529.6172 503.3501 -1518.4004 497.5498 -1507.2002 C
494.25 -1500.7998 491.5 -1494.7334 489.2998 -1489 C
531.2334 -1499.2334 574.6836 -1499.2334 619.6499 -1489 C
709.5166 -1468.833 883.5 -1481.3164 1141.5996 -1526.4502 C
1065.6504 -1566.0498 L
576.1499 -1609.5 L
563.4834 -1577.667 545.8999 -1563.1836 523.3999 -1566.0498 C
f
1081.25 -1763 m
1118.4502 -1736.8672 1115.0664 -1710.5498 1071.0996 -1684.0498 C
1355.25 -1600.0498 L
1283.2168 -1638.5166 1191.8828 -1692.833 1081.25 -1763 C
f
*U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(mouth-shadows) Ln
0 A
*u
0 O
0.333104 0.934356 0.710475 0.392218 0.466667 0.12549 0.184314 Xa
0 J 0 j 1 w 10 M []0 d1 XR
1308.5996 -1561.3496 m
1322.5 -1567.583 1328.333 -1576.417 1326.0996 -1587.8496 C
1318.2334 -1593.3164 1310.25 -1598.6328 1302.1504 -1603.7998 C
1278.8828 -1618.5 1254.6836 -1631.7334 1229.5498 -1643.5 C
1231.0498 -1624.5332 1238.1504 -1603.9668 1250.8496 -1581.7998 C
1262.3828 -1561.4336 1279.4834 -1554.0166 1302.1504 -1559.5498 C
1304.2168 -1559.917 1306.3672 -1560.5166 1308.5996 -1561.3496 C
f
607.6499 -1505.7002 m
607.6499 -1582.8496 L
610.4834 -1627.5166 622.2002 -1662.2334 642.7998 -1687 C
630.6333 -1681.5664 621.7998 -1675.2832 616.2998 -1668.1504 C
601.8335 -1649.3496 592.7168 -1633.8164 588.9502 -1621.5498 C
572.25 -1579.917 552.2998 -1557.5 529.1001 -1554.2998 C
536.2998 -1545.5996 531.5332 -1534.0498 514.7998 -1519.6504 C
527.9336 -1529.2168 539.4336 -1528.583 549.2998 -1517.75 C
530 -1511.9502 517.2666 -1506.6328 511.1001 -1501.7998 C
532.3999 -1508.4668 561.8667 -1510.0664 599.5 -1506.5996 C
602.2334 -1506.3672 604.9502 -1506.0664 607.6499 -1505.7002 C
f
804.9502 -1711.25 m
850.8833 -1703.917 858.9502 -1679.9834 829.1499 -1639.4502 C
892.4834 -1674.3828 959.2998 -1674.3828 1029.5996 -1639.4502 C
1176.7998 -1639.4502 L
1176.7998 -1660.75 L
1156 -1666.9834 1135.1836 -1672.6504 1114.3496 -1677.75 C
1084.2832 -1685.1172 1054.1504 -1691.25 1023.9502 -1696.1504 C
977.1499 -1703.6836 930.2002 -1708.333 883.1001 -1710.0996 C
864.1333 -1710.7998 838.0835 -1711.1836 804.9502 -1711.25 C
f
*U
0.214054 0.940337 0.676356 0.091707 0.713726 0.188235 0.278431 Xa
1302.1504 -1558.75 m
1304.417 -1559.4834 1306.5664 -1560.3496 1308.5996 -1561.3496 C
1306.3672 -1560.5166 1304.2168 -1559.917 1302.1504 -1559.5498 C
1302.1504 -1558.75 L
f
0.263981 0.945342 0.695064 0.18613 0.623529 0.168627 0.247059 Xa
1302.1504 -1559.5498 m
1279.4834 -1554.0166 1262.3828 -1561.4336 1250.8496 -1581.7998 C
1238.1504 -1603.9668 1231.0498 -1624.5332 1229.5498 -1643.5 C
1211.9834 -1649.667 1194.4004 -1655.417 1176.7998 -1660.75 C
1176.7998 -1639.4502 L
1029.5996 -1639.4502 L
1086.0996 -1638.3496 1107.3672 -1611.667 1093.4004 -1559.4004 C
1078.4336 -1532.7334 1037.5664 -1521.3164 970.7998 -1525.1504 C
903.8667 -1528.9502 859.6167 -1527.0332 838.0498 -1519.4004 C
840.0166 -1519.4004 841.9165 -1519.4004 843.75 -1519.4004 C
842.2168 -1519.2998 840.7334 -1519.25 839.2998 -1519.25 C
1008.0332 -1508.4502 1151.7334 -1519.417 1270.4004 -1552.1504 C
1283.167 -1553.6836 1293.75 -1555.8828 1302.1504 -1558.75 C
1302.1504 -1559.5498 L
f
0.148867 0.910094 0.594934 0.021729 0.8 0.235294 0.333333 Xa
1029.5996 -1639.4502 m
959.2998 -1674.3828 892.4834 -1674.3828 829.1499 -1639.4502 C
858.9502 -1679.9834 850.8833 -1703.917 804.9502 -1711.25 C
769.0498 -1711.3164 734.1167 -1708.5332 700.1499 -1702.9004 C
676.7832 -1699 657.6665 -1693.7002 642.7998 -1687 C
622.2002 -1662.2334 610.4834 -1627.5166 607.6499 -1582.8496 C
607.6499 -1505.7002 L
617.0498 -1504.7002 626.8999 -1503.4004 637.2002 -1501.7998 C
638.9668 -1502.3672 640.8335 -1502.9502 642.7998 -1503.5498 C
648.3667 -1505.25 661.2334 -1507.3496 681.3999 -1509.8496 C
692.4668 -1511.083 705.7334 -1512.4502 721.2002 -1513.9502 C
750.1333 -1516.8164 789.5 -1518.583 839.2998 -1519.25 C
840.7334 -1519.25 842.2168 -1519.2998 843.75 -1519.4004 C
841.9165 -1519.4004 840.0166 -1519.4004 838.0498 -1519.4004 C
859.6167 -1527.0332 903.8667 -1528.9502 970.7998 -1525.1504 C
1037.5664 -1521.3164 1078.4336 -1532.7334 1093.4004 -1559.4004 C
1107.3672 -1611.667 1086.0996 -1638.3496 1029.5996 -1639.4502 C
f
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 3 79 79 255 0 50 Lb
(teeth-highlights) Ln
0 A
*u
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 10 M []0 d1 XR
620.1001 -1518.5498 m
622.6001 -1534.3496 627.5498 -1545.1328 634.9502 -1550.9004 C
644.9165 -1525.7666 655.8667 -1511.9834 667.7998 -1509.5498 C
705.2002 -1518.0166 728.0332 -1543.8496 736.2998 -1587.0498 C
754.7998 -1542.8828 779.1499 -1524.2334 809.3501 -1531.0996 C
838.2832 -1536.9004 856.5166 -1563.5 864.0498 -1610.9004 C
890.1836 -1581.2998 913.7998 -1567.9668 934.8999 -1570.9004 C
954.0332 -1581.2998 963.3164 -1600.8164 962.75 -1629.4502 C
980.4834 -1593.5498 1005.1836 -1571.8164 1036.8496 -1564.25 C
1058.5166 -1571.8828 1066.1836 -1594.3672 1059.8496 -1631.7002 C
1071.417 -1628.7998 1082.2998 -1620.9004 1092.5 -1608 C
1109.7666 -1589.2998 1124.1504 -1580.8496 1135.6504 -1582.6504 C
1145.25 -1584.1172 1148.917 -1600.4004 1146.6504 -1631.5 C
1212.25 -1575.2334 1236.2832 -1577.8828 1218.75 -1639.4502 C
1191.4502 -1662.417 1165.8828 -1667.1172 1142.0498 -1653.5498 C
1139.0498 -1671.0498 1120.0166 -1680.4336 1084.9502 -1681.7002 C
1075.6172 -1677.6328 1066.7002 -1668.3164 1058.2002 -1653.75 C
1029.833 -1691.417 1005.9336 -1707.8496 986.5 -1703.0498 C
967 -1698.1172 955.3667 -1684.0996 951.6001 -1661 C
946 -1690.7002 928.9165 -1704.4502 900.3501 -1702.25 C
875.1167 -1696.8828 858.7832 -1687.9502 851.3501 -1675.4502 C
838.6499 -1697.1172 818.4834 -1704.8672 790.8501 -1698.7002 C
750.6499 -1694.9668 728.1836 -1685.0332 723.4502 -1668.9004 C
715.2832 -1677.833 692.3164 -1678.167 654.5498 -1669.9004 C
639.6836 -1672.2998 629.3833 -1659.4502 623.6499 -1631.3496 C
604.5166 -1630.4834 588.6836 -1623.2002 576.1499 -1609.5 C
569.4165 -1572.2666 569.0835 -1538.4834 575.1499 -1508.1504 C
599.1836 -1498.6836 614.1665 -1502.1504 620.1001 -1518.5498 C
f
1238.7998 -1639.2002 m
1230.2666 -1639.0996 1232.5664 -1630.2168 1245.7002 -1612.5498 C
1258.7998 -1594.7832 1272.833 -1586.5498 1287.7998 -1587.8496 C
1299.2666 -1589.1504 1301 -1596.3672 1293 -1609.5 C
1270.667 -1624.667 1252.5996 -1634.5664 1238.7998 -1639.2002 C
f
691.8999 -1683.0996 m
699.0664 -1681.1328 708.3164 -1681.1328 719.6499 -1683.0996 C
733.1836 -1687.167 744.1333 -1692.833 752.5 -1700.0996 C
715.5664 -1700.667 695.3667 -1695 691.8999 -1683.0996 C
f
*U
*u
0.047211 0.353826 0.134249 0 0.921569 0.694118 0.733333 Xa
580.5 -1444.5498 m
578.2002 -1446.4834 574.2998 -1446.8164 568.7998 -1445.5498 C
563.2998 -1444.3164 558.1499 -1443.083 553.3501 -1441.8496 C
548.4502 -1440.6172 545.6001 -1437.8496 544.7998 -1433.5498 C
544.0664 -1429.25 545.9834 -1427.6328 550.5498 -1428.7002 C
555.1167 -1429.7998 560.3667 -1430.7832 566.2998 -1431.6504 C
572.2002 -1432.4834 577.0835 -1432.9834 580.9502 -1433.1504 C
584.8833 -1433.1504 586.3164 -1434.5498 585.25 -1437.3496 C
584.25 -1440.1504 582.6665 -1442.5498 580.5 -1444.5498 C
f
924.1499 -1468.2998 m
926.4165 -1467.2666 929.1665 -1466.75 932.3999 -1466.75 c
935.6333 -1466.75 938.3335 -1467.2666 940.5 -1468.2998 C
942.8335 -1469.3672 944 -1470.6504 944 -1472.1504 c
944 -1473.5166 942.8335 -1474.7334 940.5 -1475.7998 C
938.3335 -1476.9004 935.6333 -1477.4502 932.3999 -1477.4502 c
932 -1477.4502 931.6001 -1477.4502 931.2002 -1477.4502 C
931.2002 -1477.5498 931.2002 -1477.6328 931.2002 -1477.7002 c
931.2002 -1479.333 930.0332 -1480.6836 927.7002 -1481.75 C
925.5332 -1482.8164 922.8667 -1483.3496 919.7002 -1483.3496 c
916.5664 -1483.3496 913.8833 -1482.8164 911.6499 -1481.75 c
909.4165 -1480.6836 908.2998 -1479.333 908.2998 -1477.7002 c
908.2998 -1476.0664 909.4165 -1474.7168 911.6499 -1473.6504 C
913.8833 -1472.5498 916.5664 -1472 919.7002 -1472 c
920.1333 -1472 920.5498 -1472 920.9502 -1472 C
921.0166 -1470.5996 922.0835 -1469.3672 924.1499 -1468.2998 C
f
*U
0.046693 0.324651 0.123903 0 0.92549 0.717647 0.752941 Xa
757.1001 -1444.9502 m
757.1001 -1441.1172 763.2334 -1439.1328 775.5 -1439 C
787.7666 -1438.7334 802.4834 -1440.2168 819.6499 -1443.4502 C
836.8164 -1446.5498 851.0664 -1448.2832 862.3999 -1448.6504 C
873.6333 -1448.8828 881.8335 -1450.917 887 -1454.75 C
892.1665 -1458.417 886.1167 -1460.25 868.8501 -1460.25 C
851.5498 -1460.2168 834.1665 -1459.667 816.7002 -1458.5996 C
799.2998 -1457.5 785.0332 -1455.9004 773.8999 -1453.7998 C
762.7002 -1451.6328 757.1001 -1448.6836 757.1001 -1444.9502 c
f
*u
0.036378 0.282567 0.096864 0 0.937255 0.752941 0.788235 Xa
851.2002 -1769.0996 m
860.7002 -1770.7666 875.5498 -1768.8164 895.75 -1763.25 C
921.2168 -1755.8828 928.3335 -1758.0332 917.1001 -1769.7002 C
905.8335 -1781.2998 896.3667 -1786.333 888.7002 -1784.7998 C
881 -1783.2002 870.0166 -1785.2666 855.75 -1791 C
841.5166 -1796.7002 829.6001 -1793.3828 820 -1781.0498 C
810.4336 -1768.583 820.8335 -1764.5996 851.2002 -1769.0996 C
f
585.5498 -1699.7998 m
586.3501 -1694.9336 602.9165 -1696.4502 635.25 -1704.3496 C
667.5835 -1712.3164 678.9336 -1720.7002 669.2998 -1729.5 C
659.5664 -1738.2998 645.2334 -1742.6328 626.2998 -1742.5 C
604.0664 -1728.2334 590.4834 -1714 585.5498 -1699.7998 C
f
*U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 4 255 255 79 0 50 Lb
(pupil) Ln
0 A
0 O
0.479835 0.707759 0.818845 0.643488 0.270588 0.160784 0.094118 Xa
0 J 0 j 1 w 10 M []0 d1 XR
525.8501 -549.2002 m
552.4502 -531.1333 570.7334 -531.1333 580.7002 -549.2002 C
579.5 -550.7002 578.4336 -552.25 577.5 -553.8501 C
577.1665 -554.3833 576.8501 -554.9668 576.5498 -555.6001 C
576.3833 -555.7666 576.2998 -555.9502 576.2998 -556.1499 C
573.8335 -561.0166 572.6001 -566.3999 572.6001 -572.2998 c
572.6001 -582.3667 576.1499 -590.9502 583.25 -598.0498 c
590.4502 -605.25 599.0835 -608.8501 609.1499 -608.8501 c
619.2168 -608.8501 627.8164 -605.25 634.9502 -598.0498 C
636.8164 -596.1836 638.4668 -594.2168 639.8999 -592.1499 C
640.0332 -591.8833 640.2002 -591.6333 640.3999 -591.3999 C
650.2002 -576.9668 669.6167 -577.2168 698.6499 -592.1499 C
695.8833 -608.0498 687.5664 -621.7334 673.7002 -633.2002 C
632.2334 -626.3335 589.0498 -623.8833 544.1499 -625.8501 C
528.9834 -610.9834 521.3999 -593.6167 521.3999 -573.75 c
521.3999 -567.6167 522.1665 -561.75 523.7002 -556.1499 C
523.7002 -555.9502 523.75 -555.7666 523.8501 -555.6001 C
523.9502 -554.9668 524.0835 -554.3833 524.25 -553.8501 C
524.6836 -552.25 525.2168 -550.7002 525.8501 -549.2002 C
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
622.4502 -543.8501 m
623.2168 -544.1836 623.8999 -544.5835 624.5 -545.0498 C
624.9668 -545.2168 625.3833 -545.3999 625.75 -545.6001 C
627.7168 -546.9336 629.5332 -548.4336 631.2002 -550.1001 C
637.3335 -556.2334 640.3999 -563.6333 640.3999 -572.2998 c
640.3999 -579.5 638.3164 -585.8164 634.1499 -591.25 C
633.1499 -592.3501 632.1665 -593.3833 631.2002 -594.3501 C
625.0664 -600.5835 617.7168 -603.7002 609.1499 -603.7002 c
600.5166 -603.7002 593.1333 -600.5835 587 -594.3501 C
580.9336 -588.2832 577.8999 -580.9336 577.8999 -572.2998 c
577.8999 -566.5664 579.2002 -561.4502 581.7998 -556.9502 C
581.8999 -556.75 582.0166 -556.5664 582.1499 -556.3999 C
582.4502 -555.8667 582.8164 -555.3335 583.25 -554.7998 C
584.25 -553.2666 585.4165 -551.7998 586.75 -550.3999 C
586.8164 -550.2998 586.8999 -550.2002 587 -550.1001 C
593.1333 -543.9668 600.5166 -540.8999 609.1499 -540.8999 c
610.6167 -540.8999 612.0835 -541 613.5498 -541.2002 C
615.0835 -541.4336 616.5664 -541.7832 618 -542.25 C
619.5 -542.6167 620.9834 -543.1499 622.4502 -543.8501 C
f
*u
0.571832 0.695003 0.761257 0.762539 0.176471 0.105882 0.058824 Xa
698.6499 -592.1499 m
669.6167 -577.2168 650.2002 -576.9668 640.3999 -591.3999 C
640.2002 -591.6333 640.0332 -591.8833 639.8999 -592.1499 C
638.4668 -594.2168 636.8164 -596.1836 634.9502 -598.0498 C
627.8164 -605.25 619.2168 -608.8501 609.1499 -608.8501 c
599.0835 -608.8501 590.4502 -605.25 583.25 -598.0498 c
576.1499 -590.9502 572.6001 -582.3667 572.6001 -572.2998 c
572.6001 -566.3999 573.8335 -561.0166 576.2998 -556.1499 C
576.2998 -555.9502 576.3833 -555.7666 576.5498 -555.6001 C
576.8501 -554.9668 577.1665 -554.3833 577.5 -553.8501 C
578.4336 -552.25 579.5 -550.7002 580.7002 -549.2002 C
570.7334 -531.1333 552.4502 -531.1333 525.8501 -549.2002 C
530.0166 -538.3335 537.2334 -528.5664 547.5 -519.8999 C
550.2666 -517.7002 553.1001 -515.6665 556 -513.7998 C
576.5 -517.9668 595.7334 -523.7998 613.7002 -531.2998 C
615.2998 -531.8999 616.8501 -532.5664 618.3501 -533.2998 C
619.9834 -533.8999 621.5498 -534.5664 623.0498 -535.2998 C
623.8501 -535.6665 624.6001 -536.0166 625.2998 -536.3501 C
625.7666 -536.5498 626.1665 -536.7334 626.5 -536.8999 C
653.9336 -549.7998 678.2002 -566.7998 699.2998 -587.8999 C
699.1333 -589.3335 698.9165 -590.75 698.6499 -592.1499 C
f
1 D
622.4502 -543.8501 m
620.9834 -543.1499 619.5 -542.6167 618 -542.25 C
616.5664 -541.7832 615.0835 -541.4336 613.5498 -541.2002 C
612.0835 -541 610.6167 -540.8999 609.1499 -540.8999 c
600.5166 -540.8999 593.1333 -543.9668 587 -550.1001 C
586.8999 -550.2002 586.8164 -550.2998 586.75 -550.3999 C
585.4165 -551.7998 584.25 -553.2666 583.25 -554.7998 C
582.8164 -555.3335 582.4502 -555.8667 582.1499 -556.3999 C
582.0166 -556.5664 581.8999 -556.75 581.7998 -556.9502 C
579.2002 -561.4502 577.8999 -566.5664 577.8999 -572.2998 c
577.8999 -580.9336 580.9336 -588.2832 587 -594.3501 C
593.1333 -600.5835 600.5166 -603.7002 609.1499 -603.7002 c
617.7168 -603.7002 625.0664 -600.5835 631.2002 -594.3501 C
632.1665 -593.3833 633.1499 -592.3501 634.1499 -591.25 C
638.3164 -585.8164 640.3999 -579.5 640.3999 -572.2998 c
640.3999 -563.6333 637.3335 -556.2334 631.2002 -550.1001 C
629.5332 -548.4336 627.7168 -546.9336 625.75 -545.6001 C
625.3833 -545.3999 624.9668 -545.2168 624.5 -545.0498 C
623.8999 -544.5835 623.2168 -544.1836 622.4502 -543.8501 C
f
*U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 5 255 79 255 0 50 Lb
(eye-highlights) Ln
0 A
0 D
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 10 M []0 d1 XR
592.3501 -554.6499 m
592.4502 -551.6167 594.1001 -549.0498 597.2998 -546.9502 C
600.5 -544.7832 604.3164 -543.7002 608.75 -543.7002 c
613.2168 -543.7002 616.9502 -544.7832 619.9502 -546.9502 C
622.9834 -549.0498 624.4502 -551.6167 624.3501 -554.6499 C
624.3501 -557.75 622.7666 -560.3833 619.6001 -562.5498 C
616.3999 -564.6836 612.5664 -565.75 608.1001 -565.75 c
603.6333 -565.75 599.8833 -564.6836 596.8501 -562.5498 C
593.8501 -560.3833 592.3501 -557.75 592.3501 -554.6499 C
f
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 6 79 255 255 0 50 Lb
(dark-makeup) Ln
0 A
*u
0 O
0.619379 0.555413 0.529778 0.269841 0.360784 0.352941 0.356863 Xa
0 J 0 j 1 w 10 M []0 d1 XR
1567.4004 -744.6001 m
1575.5996 -750.1001 1605.333 -757.2168 1656.5996 -765.9502 C
1605.1328 -764.7832 1565.333 -757.25 1537.2002 -743.3501 C
1567.4004 -744.6001 L
f
1271.5498 -644.2998 m
1316.9502 -651.2002 1351.8672 -658.75 1376.2998 -666.9502 C
1159.7998 -682.6001 L
1123.4004 -678.7002 1087.6328 -686.5664 1052.5 -706.2002 C
1078.4336 -685.9668 1107.167 -675.0166 1138.7002 -673.3501 C
1181.7998 -646.9834 1226.083 -637.2998 1271.5498 -644.2998 C
f
399.75 -538.5 m
413.2168 -597.4668 469.2334 -627.0664 567.7998 -627.2998 C
513.5664 -640.6665 468.7832 -642.4834 433.4502 -632.75 C
398.0166 -622.9834 378.7832 -608.1836 375.75 -588.3501 C
372.6499 -568.4834 380.6499 -551.8667 399.75 -538.5 C
f
384.25 -479.1001 m
471.9502 -448.7334 546.7168 -451 608.5498 -485.8999 C
670.2168 -520.7998 702.1167 -554.9668 704.25 -588.3999 C
609.4165 -508.7334 509.5166 -485.7002 404.5498 -519.2998 C
371.0835 -496.7334 364.3169 -483.3335 384.25 -479.1001 C
f
*U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 7 128 128 128 0 50 Lb
(eyebrows-eye-outline) Ln
0 A
*u
0 O
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
0 J 0 j 1 w 10 M []0 d1 XR
1350.8496 -739.5 m
1356.7832 -728.8999 1357.1328 -716.3999 1351.9004 -702 C
1339.0996 -699.8335 1326.417 -697.8667 1313.8496 -696.1001 C
1311.1504 -701.8999 1308.9502 -710.3501 1307.25 -721.4502 C
1305.1504 -709.8164 1304.7666 -700.9834 1306.0996 -694.9502 C
1255.667 -688.0166 1206.9004 -683.8999 1159.7998 -682.6001 C
1177.2002 -677 1195.083 -672.5 1213.4502 -669.1001 C
1206.083 -662.8335 1199.6328 -653.5498 1194.0996 -641.25 C
1166.2334 -642.25 1142.2002 -647.7998 1122 -657.8999 C
1140 -643.5332 1162.7666 -634.8501 1190.2998 -631.8501 C
1188.7998 -627.8833 1187.4004 -623.6499 1186.0996 -619.1499 C
1188.333 -623.5498 1190.5996 -627.7002 1192.9004 -631.6001 C
1198.2998 -631.0664 1203.8828 -630.75 1209.6504 -630.6499 C
1213.25 -630.6167 1217.0498 -630.6665 1221.0498 -630.7998 C
1220.2168 -627.1333 1219.4834 -623.2998 1218.8496 -619.2998 C
1220.083 -623.3999 1221.3828 -627.2666 1222.75 -630.8999 C
1258.7832 -632.5 1309.7168 -642.3833 1375.5498 -660.5498 C
1433.5166 -676.5166 1477.5332 -690.75 1507.5996 -703.25 C
1517.167 -692.75 1520.9502 -679.7666 1518.9502 -664.2998 C
1525.25 -681.6665 1524.2998 -695.8833 1516.0996 -706.9502 C
1516.1328 -706.9502 1516.167 -706.9668 1516.2002 -707 C
1537 -712.3667 1560.417 -710.7334 1586.4502 -702.1001 C
1572.5166 -711.1333 1555.5498 -715.8667 1535.5498 -716.2998 C
1563.1172 -728.8999 1597.4502 -733.1167 1638.5498 -728.9502 C
1614.1172 -737.1499 1592.4004 -742.2002 1573.4004 -744.1001 C
1585.9668 -752.8667 1604.0332 -759.3335 1627.5996 -763.5 C
1605.0664 -763.3667 1580.8164 -757.1665 1554.8496 -744.8999 C
1548.6172 -744.7998 1542.7334 -744.2832 1537.2002 -743.3501 C
1537.1328 -743.3501 1537.083 -743.3335 1537.0498 -743.2998 C
1536.4834 -756.2334 1539.7334 -768.4502 1546.7998 -779.9502 C
1537.7998 -770.6167 1532.4004 -757.8164 1530.5996 -741.5498 C
1498.167 -732.75 1466.3164 -724.9336 1435.0498 -718.1001 C
1436.7168 -728.8335 1432.25 -742.0498 1421.6504 -757.75 C
1429.3496 -739.7832 1431.3164 -726.0332 1427.5498 -716.5 C
1405.25 -711.7002 1383.2168 -707.4165 1361.4502 -703.6499 C
1363.5498 -718.7832 1360.0166 -730.7334 1350.8496 -739.5 C
f
1782.5 -614.1001 m
1568.667 -486.7666 1345.2832 -465.5835 1112.3496 -550.5498 C
1062.8828 -550.7168 1048.0664 -528.8501 1067.9004 -484.9502 C
1087.7334 -441.0498 1194.6172 -430.1831 1388.5498 -452.3501 C
1582.5498 -474.4165 1713.8672 -528.3335 1782.5 -614.1001 C
f
714.1499 -606.75 m
713.9502 -606.5835 713.7998 -606.4502 713.7002 -606.3501 C
687.8335 -567.6836 631.2666 -535.9336 544 -511.1001 C
503.0669 -502.6333 464.5498 -508.8169 428.4502 -529.6499 C
413.9834 -541.5166 409.0166 -553.6333 413.5498 -566 C
437.4165 -604.8667 479.9668 -623.9668 541.2002 -623.2998 C
589.0332 -622.1333 625.3501 -623.5498 650.1499 -627.5498 C
675.0835 -631.5166 690.5835 -635.3999 696.6499 -639.2002 C
702.5835 -643 707.6836 -645.4336 711.9502 -646.5 C
711.8833 -646.7002 711.8164 -646.9502 711.75 -647.25 C
702.0166 -649.25 694.8833 -646.9668 690.3501 -640.3999 C
685.8501 -633.7998 631.8335 -629.6333 528.2998 -627.8999 C
499.3667 -642.1001 475.4502 -656.6836 456.5498 -671.6499 C
473.75 -654.0835 493.5 -639.3999 515.7998 -627.6001 C
494.8667 -626.9336 476.5835 -625.25 460.9502 -622.5498 C
431.5835 -632.25 410.3833 -641.3164 397.3501 -649.75 C
414.75 -634.3833 429.8169 -623.9834 442.5498 -618.5498 C
427.3833 -614.5166 415.5835 -609.1836 407.1499 -602.5498 C
383.1499 -607.8164 360.7832 -617.7168 340.0498 -632.25 C
358.4502 -613.2168 377.3833 -599.6499 396.8501 -591.5498 C
393.8169 -586.7168 391.9834 -581.4502 391.3501 -575.75 C
368.1831 -576.2832 343.9331 -584.0835 318.6001 -599.1499 C
339.2998 -580.8164 363.5332 -570.0835 391.2998 -566.9502 C
391.7334 -561.8164 393.0332 -556.3501 395.2002 -550.5498 C
397.1333 -545.2832 397.6333 -541.5 396.7002 -539.2002 C
397.4668 -554.6665 379.25 -563.0835 342.0498 -564.4502 C
302.1499 -565.8501 272.2002 -555.8164 252.2002 -534.3501 C
281.2334 -560.4502 315.2832 -564.9165 354.3501 -547.75 C
314.4834 -554.1167 279.9502 -541.4668 250.75 -509.7998 C
271.4165 -528.4668 302.6333 -538.1499 344.3999 -538.8501 C
318.9331 -533.0835 292.1167 -515.7002 263.9502 -486.7002 C
291.9502 -514 327.7832 -528.1167 371.4502 -529.0498 C
335.8501 -517.6167 313.5 -502.8169 304.3999 -484.6499 C
329.7666 -508.0498 353.8169 -518.0835 376.5498 -514.75 C
379.8501 -513.9502 383.4668 -513.0332 387.3999 -512 C
388.7002 -511.5669 389.9834 -511.0835 391.25 -510.5498 C
368.6167 -494.1831 353.1001 -473.5332 344.7002 -448.6001 C
368.1665 -486.3999 396.6001 -503.4331 430 -499.7002 C
434.1665 -498.3999 438.5 -497.0332 443 -495.6001 C
427.2666 -484.3999 415.7998 -471.2334 408.6001 -456.1001 C
418.6001 -470.4331 432.0835 -482.9668 449.0498 -493.7002 C
450.4165 -493.2334 451.8335 -492.7666 453.2998 -492.2998 C
455.6333 -491.5669 458 -490.8833 460.3999 -490.25 C
445.7666 -474.6831 433.75 -457.5498 424.3501 -438.8501 C
436.2832 -457.1499 451.4502 -473.6001 469.8501 -488.2002 C
475.9502 -487.1001 482.1665 -486.4165 488.5 -486.1499 C
479.3335 -477.1499 472.2334 -466.1499 467.2002 -453.1499 C
476.7002 -466.6831 487.9834 -477.7002 501.0498 -486.2002 C
557.6836 -488.7998 625.4165 -522.8667 704.25 -588.3999 C
708.7832 -594.1333 712.0835 -600.25 714.1499 -606.75 C
f
1 D
1233.8496 -665.7998 m
1229.917 -659.1665 1226.583 -651.1333 1223.8496 -641.7002 C
1215.2832 -641.1333 1207.0166 -640.9336 1199.0498 -641.1001 C
1206.9834 -652.4336 1215.5166 -661.1167 1224.6504 -667.1499 C
1227.7168 -666.6836 1230.7832 -666.2334 1233.8496 -665.7998 C
f
1244.2998 -664.4502 m
1271.2666 -661.3501 1299.1836 -660.5 1328.0498 -661.8999 C
1290.9834 -651 1257.5166 -644.3667 1227.6504 -642 C
1232.4502 -651.5664 1238 -659.0498 1244.2998 -664.4502 C
f
0 D
586.2002 -308.3999 m
612.8999 -345.3999 625.3164 -379.7666 623.4502 -411.5 C
552.5835 -379.4668 489.1001 -336.5498 433 -282.75 C
376.8335 -228.9834 335.3999 -227.5498 308.7002 -278.4502 C
312.9331 -187.8501 352.2334 -166.1001 426.6001 -213.2002 C
500.8667 -260.2002 554.0664 -291.9331 586.2002 -308.3999 C
f
488.3999 -433.8999 m
430.8335 -430.1665 391.7334 -443.4502 371.1001 -473.75 C
379.5332 -437.5166 422.3833 -420.8999 499.6499 -423.8999 C
576.9502 -427.0332 648.4502 -470.7666 714.1499 -555.1001 C
692.3501 -529.1665 664.8833 -504.2832 631.75 -480.4502 C
593.8164 -453.0835 546.0332 -437.5669 488.3999 -433.8999 C
f
829.5498 -1251.0996 m
806.0498 -1257.167 791.2334 -1254.583 785.1001 -1243.3496 C
778.8999 -1232.1172 758.2168 -1231.1836 723.0498 -1240.5498 C
768.0498 -1218.4834 828.2002 -1220.3496 903.5 -1246.1504 C
972.1333 -1269.6836 1021.1504 -1263.3672 1050.5498 -1227.2002 C
1024.3828 -1261.0332 988.2832 -1272.3496 942.25 -1261.1504 C
890.5166 -1248.3828 852.9502 -1245.0332 829.5498 -1251.0996 C
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
